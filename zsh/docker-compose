alias dcrun="docker-compose run"
alias rubocop="dexec_console rubocop $@"
alias kill-dc-console="docker-compose ps -a | grep console | grep Up | cut -d\  -f1 | xargs docker kill > /dev/null 2>&1; docker-compose rm -f"
alias grep-dc-console="docker-compose ps -a | grep console | grep Up | head -1 | cut -d' ' -f1"

function start_dc_console() {
  [ -z "$(grep-dc-console)" ] && dcrun -d console tail -F none
}

function dexec_dc_console() {
  start_dc_console
  (cd $(dc_workdir) && docker exec -ti -w /app/$(dc_project_dir)$DEXEC_ARGV $(grep-dc-console) $@ && exit 1)
}

function dc_workdir() {
  [ -n "$(dc_project_dir)" ] && echo '..' || echo '.'
}

function dc_project_dir() {
  [ -f 'docker-compose.yml' ] && echo '' || echo $(basename $(pwd))
}

function vcr_env() {
  [ -n "$VCR$VCR_UP" ] && echo " -e VCR_UP=1"
}

function prof_env() {
  [ -n "$PROF" ] && echo " -e TEST_STACK_PROF=$PROF -e TEST_STACK_PROF_FORMAT=json"
}

function log_env() {
  [ -n "$LOG" ] && echo " -e LOG=$LOG"
}

function rspec() {
  dcwd=$(dc_project_dir)
  pd=dcwd
  typeset -A pdfiles
  start_dc_console

  for f in $@; do
    [ -z "$dcwd" ] && pd=$(echo $f | cut -d/ -f1 | grep -v spec)
    pdfiles[$pd]="$pdfiles[$pd] ${f#$pd/}"
  done

  for pd in ${(@k)pdfiles}; do
    dc_args="-e APP_ENV=test -e RACK_ENV=test$(log_env)$(prof_env)$(vcr_env) $(grep-dc-console) bundle exec rspec$pdfiles[$pd]"
    (cd $(dc_workdir) && docker exec -ti -w /app/$pd $(echo $dc_args))
    [ -n "$(vcr_env)" ] && sudo chown -R $USER $(dc_workdir)/$pd/spec/cassettes
  done
}

function psql() {
  docker exec -ti $(docker-compose ps | grep $(basename $(pwd))_db | head -1 | cut -d' ' -f1) psql $@
}

function bundle() {
  if [ "$1" = "all" ]; then
    echo "#!/bin/bash

    find ./ -maxdepth 2 -name Gemfile | {
      while read str; do
        dir=\$(dirname \$str)
        cd \$dir && echo -\\>\$(pwd) && bundle && [ \$dir = '.' ] || cd .. && echo \$(pwd)
      done
    }" > $(dc_workdir)/.bundle-script

    chmod a+x $(dc_workdir)/.bundle-script
    (cd $(dc_workdir) && dexec_console ./.bundle-script)
  else
    DEXEC_ARGV=" -e APP_ENV=test -e RACK_ENV=test" dexec_console bundle $@
    sudo chown -R $USER $(dc_workdir)/$(dc_project_dir)
  fi
}

function rcop() {
  for branch in develop master main; do
    [ -z "$base_branch" ] && base_branch=$(git rev-parse --verify --symbolic -q $branch)
  done
  rcop_files=$(git diff origin/$base_branch..HEAD --name-only --diff-filter=dr | grep -E ".+\.rb")
  workdir=$(dc_workdir)
  echo "#!/bin/bash\necho \"$rcop_files\" | xargs bundle exec rubocop $@" > $workdir/.rcop-script
  chmod a+x $workdir/.rcop-script
  project_dir=$(dc_project_dir)
  (cd $(dc_workdir) && docker exec -i -w /app/$project_dir $(grep-dc-console) ./.rcop-script && exit 1)
}
